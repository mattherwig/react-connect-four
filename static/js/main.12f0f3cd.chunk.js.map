{"version":3,"sources":["utils/ApplicationConstants.js","utils/WinnerCalculator.js","components/Board/Tile.js","components/Board/Board.js","components/BoardSidebar/BoardHeader.js","components/BoardSidebar/BoardHistory.js","components/BoardSidebar/BoardSidebar.js","components/Game.js","components/App.js","index.js"],"names":["PLAYER_RED_TILE","PLAYER_YELLOW_TILE","checkWinner","tileMatrix","r","ROW_SIZE","c","head","count","rd","curr","winner","winnerTiles","checkVerticalWinner","COLUMN_SIZE","cd","checkHorizontalWinner","d","checkDiagnolOneWinner","checkDiagnolTwoWinner","Tile","value","isWinner","row","isGameOver","onClick","tileClassName","winnerClassName","defaultStyle","transition","opacity","transitionStyles","entering","entered","exiting","exited","Transition","in","timeout","state","style","className","Board","turn","onPlayAgain","onTileClick","tileElements","map","tileRow","tileRowElements","tile","column","find","GameOverModal","title","subtitle","Button","variant","BoardHeader","onReset","HeaderInfo","highlight","HeaderActionGroup","ProgressBar","animated","min","max","now","BoardHistory","tileMatrixHistory","onSetGame","historyElements","index","HistoryItem","reverse","BoardSidebar","Game","useState","getInitialTileMatrix","setTileMatrix","setTurn","setTileMatrixHistory","currentPlayer","historyItem","_","cloneDeep","concat","Container","Row","Col","cloneTileMatrix","highestRow","findLastIndex","xs","lg","App","Image","src","Badge","noGutters","href","rel","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.12f0f3cd.chunk.js","sourcesContent":["export const ROW_SIZE = 6;\nexport const COLUMN_SIZE = 7;\nexport const MAX_TURNS = ROW_SIZE * COLUMN_SIZE;\nexport const PLAYER_RED_TILE = 'red';\nexport const PLAYER_YELLOW_TILE = 'yellow';\n\nexport const BASE_HOST_URL = 'https://mattherwig.github.io/react-connect-four';","import { COLUMN_SIZE, ROW_SIZE } from \"../utils/ApplicationConstants\";\n\nexport default function checkWinner(tileMatrix) {\n  return checkVerticalWinner(tileMatrix)\n      || checkHorizontalWinner(tileMatrix)\n      || checkDiagnolOneWinner(tileMatrix)\n      || checkDiagnolTwoWinner(tileMatrix)\n      || { winner: null, winnerTiles: null };\n}\n\nfunction checkVerticalWinner(tileMatrix) {\n  for (let r = 0; r < ROW_SIZE - 3; r++) {\n    for (let c = 0; c < COLUMN_SIZE; c++) {\n      const head = tileMatrix[r][c];\n      let count = 1;\n      for (let rd = 1; rd < 4; rd++) {\n        const curr = tileMatrix[r + rd][c];\n        if (head && head === curr) count++;\n      }\n      if (count === 4) return {\n        winner: head,\n        winnerTiles: [[r, c], [r + 1, c], [r + 2, c], [r + 3, c]]\n      };\n    }\n  }\n  return null;\n}\n\nfunction checkHorizontalWinner(tileMatrix) {\n  for (let c = 0; c < COLUMN_SIZE - 3; c++) {\n    for (let r = 0; r < ROW_SIZE; r++) {\n      const head = tileMatrix[r][c];\n      let count = 1;\n      for (let cd = 1; cd < 4; cd++) {\n        const curr = tileMatrix[r][c + cd];\n        if (head && head === curr) count++;\n      }\n      \n      if (count === 4) return {\n        winner: head,\n        winnerTiles: [[r, c], [r, c + 1], [r, c + 2], [r, c + 3]]\n      };\n    }\n  }\n  return null;\n}\n\nfunction checkDiagnolOneWinner(tileMatrix) {\n  for (let r = 0; r < ROW_SIZE - 3; r++) {\n    for (let c = 0; c < COLUMN_SIZE - 3; c++) {\n      const head = tileMatrix[r][c];\n      let count = 1;\n      for (let d = 1; d < 4; d++) {\n        const curr = tileMatrix[r + d][c + d];\n        if (head && head === curr) count++;\n      }\n      if (count === 4) return {\n        winner: head,\n        winnerTiles: [[r, c], [r + 1, c + 1], [r + 2, c + 2], [r + 3, c + 3]]\n      };\n    }\n  }\n  return null;\n}\n\nfunction checkDiagnolTwoWinner(tileMatrix) {\n  for (let r = 0; r < ROW_SIZE - 3; r++) {\n    for (let c = 3; c < COLUMN_SIZE; c++) {\n      const head = tileMatrix[r][c];\n      let count = 1;\n      for (let d = 1; d < 4; d++) {\n        const curr = tileMatrix[r + d][c - d];\n        if (head && head === curr) count++;\n      }\n      if (count === 4) return {\n        winner: head,\n        winnerTiles: [[r, c], [r + 1, c - 1], [r + 2, c - 2], [r + 3, c - 3]]\n      };\n    }\n  }\n  return null;\n}","import { Transition } from 'react-transition-group';\nimport { PLAYER_RED_TILE } from '../../utils/ApplicationConstants';\n\nimport './Tile.css';\n\nexport default function Tile({ value, row, isWinner, isGameOver, onClick }) {\n  const tileClassName = value ? (value === PLAYER_RED_TILE ? \"tile--red\" : \"tile--yellow\") : \"\";\n  const winnerClassName = isWinner ? \"tile--winner\" : \"\";\n\n  const duration = 500;\n  const defaultStyle = {\n    transition: `opacity ${duration}ms ease-in-out`,\n    opacity: 0.5\n  }\n  \n  const transitionStyles = {\n    entering: { opacity: 1 },\n    entered: { opacity: 1 },\n    exiting: { opacity: 0.5 },\n    exited: { opacity: 0.5 },\n  };\n\n  return (\n    <Transition\n      in={!isGameOver || isWinner} \n      timeout={duration}\n    >\n      {state => (\n        <div style={{\n          ...defaultStyle,\n          ...transitionStyles[state]\n        }}>\n          <button\n            className={`tile ${tileClassName} ${winnerClassName}`}\n            onClick={onClick}\n          />\n        </div>\n      )}\n    </Transition>\n  );\n}","import Tile from \"./Tile\";\nimport { Button } from \"react-bootstrap\";\nimport { MAX_TURNS } from \"../../utils/ApplicationConstants\";\n\nimport \"./Board.css\";\n\n\nexport default function Board({ tileMatrix, winnerTiles, winner, turn, onPlayAgain, onTileClick }) {\n  const tileElements = tileMatrix.map((tileRow, row) => {\n    const tileRowElements = tileRow.map((tile, column) => {\n      const winner = winnerTiles?.find(([r, c]) => r === row && c === column);\n      return (\n        <td key={column}>\n          <Tile \n            value={tile} \n            row={row}\n            isWinner={!!winner}\n            isGameOver={!!winnerTiles}\n            onClick={() => onTileClick(column)}\n          />\n        </td>\n      );\n    })\n    return <tr key={row}>{tileRowElements}</tr>;\n  });\n\n  return (\n    <div className=\"board\">\n      {winnerTiles && <GameOverModal title=\"Game Over\" subtitle={`${winner} won the game!`} onPlayAgain={onPlayAgain} />}\n      {!winnerTiles && turn >= MAX_TURNS && <GameOverModal title=\"Game Tie\" onPlayAgain={onPlayAgain} />}\n      <table>\n        <tbody>{tileElements}</tbody>\n      </table>\n    </div>\n  );\n}\n\nfunction GameOverModal({ title, subtitle, onPlayAgain }) {\n  return (\n    <div className=\"board--gameover\">\n      <h2><b>{title}</b></h2>\n      {subtitle && <h6>{subtitle}</h6>}\n      <br/>\n      <Button variant=\"dark\" onClick={onPlayAgain}>Play Again</Button>\n    </div>\n  );\n}","import { Button, ProgressBar } from \"react-bootstrap\";\nimport { MAX_TURNS, PLAYER_RED_TILE, PLAYER_YELLOW_TILE } from \"../../utils/ApplicationConstants\";\n\nimport './BoardHeader.css';\n\nexport default function BoardHeader({ turn, winner, onReset }) {\n  return (\n    <div className=\"board-header\">\n      <HeaderInfo\n        title={winner ? 'Winner:' : 'Turn:'}\n        highlight={turn % 2 === 0 ? PLAYER_RED_TILE : PLAYER_YELLOW_TILE }\n      />\n      <HeaderActionGroup\n        onReset={onReset}\n      />\n      <ProgressBar\n          animated\n          variant={winner ? \"danger\" : \"warning\"}\n          min={0}\n          max={MAX_TURNS}\n          now={winner ? MAX_TURNS : turn}\n        />\n    </div>\n  );\n}\n\nfunction HeaderInfo({ title, highlight }) {\n  return (\n    <>\n      <h4 className=\"board-header__title\">{title}</h4>\n      <h1 className=\"board-header__highlight\">{highlight}</h1>\n    </>\n  )\n}\n\nfunction HeaderActionGroup({ onReset }) {\n  return (\n    <Button\n      className=\"board-header__reset\"\n      variant=\"dark\"\n      onClick={onReset}\n    >\n      Reset\n    </Button>\n  );\n}","import { Button } from \"react-bootstrap\";\n\nimport \"./BoardHistory.css\";\n\nexport default function BoardHistory({ tileMatrixHistory, onSetGame }) {\n  const historyElements = tileMatrixHistory.map(({ tileMatrix, turn, winner }, index) => (\n    // Note: While an index should not be used in theory, the index shouldn't change on each history element in this case\n    <HistoryItem\n      key={index}\n      index={index}\n      turn={turn}\n      winner={winner}\n      onSetGame={() => onSetGame(index)}\n    />\n  ));\n  return (\n    <div className=\"board-history\">\n      {historyElements.reverse()}\n    </div>\n  );\n}\n\nfunction HistoryItem({ index, turn, winner, onSetGame }) {\n  return (\n    <Button className=\"board-history__item\" variant=\"dark\" onClick={() => onSetGame(index)}>\n      { winner ? `${winner} won in ${turn} turns` : `Lasted ${turn} turns`}\n    </Button>\n  );\n}\n","import BoardHeader from './BoardHeader';\nimport BoardHistory from './BoardHistory';\n\nimport './BoardSidebar.css';\n\nexport default function BoardSidebar({ turn, winner, tileMatrixHistory, onReset, onSetGame }) {\n  return (\n    <div className=\"board-sidebar\">\n      <div className=\"board-sidebar__progress\">\n        <BoardHeader \n          turn={turn} \n          winner={winner}\n          onReset={onReset}\n        />\n        <BoardHistory\n          tileMatrixHistory={tileMatrixHistory}\n          onSetGame={onSetGame}\n        />\n      </div>\n    </div>\n  )\n}","import _ from \"lodash\";\nimport { useState } from \"react\";\nimport { Col, Container, Row } from \"react-bootstrap\";\nimport { MAX_TURNS, PLAYER_RED_TILE, PLAYER_YELLOW_TILE } from \"../utils/ApplicationConstants\";\nimport checkWinner from \"../utils/WinnerCalculator\";\nimport Board from \"./Board/Board\";\nimport BoardSidebar from \"./BoardSidebar/BoardSidebar\";\n\nimport \"./Game.css\";\n\nexport default function Game() {\n  const [tileMatrix, setTileMatrix] = useState(getInitialTileMatrix());\n  const [turn, setTurn] = useState(0);\n  const [tileMatrixHistory, setTileMatrixHistory] = useState([]);\n\n  const { winner, winnerTiles } = checkWinner(tileMatrix);\n  const currentPlayer = turn % 2 === 0 ? PLAYER_RED_TILE : PLAYER_YELLOW_TILE;\n\n  const onTileClick = (column) => {\n    if (winner || turn >= MAX_TURNS) return;\n    const cloneTileMatrix = _.cloneDeep(tileMatrix);\n    \n    const highestRow = _.findLastIndex(cloneTileMatrix, tileRow => !tileRow[column]);\n    if (highestRow === -1) return;\n\n    cloneTileMatrix[highestRow][column] = currentPlayer;\n    setTurn(turn + 1);\n    setTileMatrix(cloneTileMatrix);\n  };\n\n  const onReset = () => {\n    const historyItem = {\n      tileMatrix: _.cloneDeep(tileMatrix),\n      turn: turn,\n      winner: winner\n    };\n    setTurn(0);\n    setTileMatrix(getInitialTileMatrix());\n    setTileMatrixHistory(_.cloneDeep(tileMatrixHistory).concat([historyItem]))\n  }\n\n  const onSetGame = (index) => {\n    const { tileMatrix, turn } = tileMatrixHistory[index];\n    setTurn(turn);\n    setTileMatrix(_.cloneDeep(tileMatrix));\n  }\n\n  return (\n    <Container>\n      <Row>\n        <Col>\n          <Board \n            tileMatrix={tileMatrix} \n            winnerTiles={winnerTiles}\n            winner={winner}\n            turn={turn}\n            currentPlayer={currentPlayer}\n            onPlayAgain={onReset}\n            onTileClick={onTileClick}\n          />\n        </Col>\n        <Col xs={12} lg>\n          <BoardSidebar \n            turn={turn}\n            winner={winner}\n            tileMatrixHistory={tileMatrixHistory}\n            onReset={onReset}\n            onSetGame={onSetGame}\n          />\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\n\nfunction getInitialTileMatrix() {\n  // Array(ROW_SIZE).fill(Array(COLUMN_SIZE).fill(null)) -- doesn't work\n  const column = [null, null, null, null, null, null, null];\n  return [[...column],[...column],[...column],[...column],[...column],[...column]];\n}\n","import { Badge, Col, Container, Image, Row } from \"react-bootstrap\";\nimport { BASE_HOST_URL } from \"../utils/ApplicationConstants\";\nimport Game from \"./Game\";\n\nimport \"./App.css\";\n\nexport default function App() {\n  return (\n    <Container className=\"app\">\n      <Row>\n        <Col className=\"app__header\">\n          <Image src={`${BASE_HOST_URL}/images/connect-four-logo.png`} />\n          <div className=\"app__about\">\n            <Badge variant=\"dark\">React</Badge>\n            <Badge variant=\"dark\">React-Bootstrap</Badge>\n            <Badge variant=\"dark\">React-Transition-Group</Badge>\n            <Badge variant=\"dark\">JavaScript</Badge>\n            <Badge variant=\"dark\">CSS</Badge>\n            <Badge variant=\"dark\">HTML</Badge>\n          </div>\n        </Col>\n      </Row>\n      <Row noGutters>\n        <Col>\n          <Game />\n        </Col>\n      </Row>\n      <Row>\n        <Col className=\"app__footer\">\n          <h2>Description</h2>\n          <p>Connect-Four is a <a href=\"https://en.wikipedia.org/wiki/Tic-tac-toe\" rel=\"noreferrer\" target=\"_blank\">tic-tac-toe</a>-like two-player game in which players alternately place pieces on a vertical board 7 columns across and 6 rows high. Each player uses pieces of a particular color (commonly black and red, or sometimes yellow and red), and the object is to be the first to obtain four pieces in a horizontal, vertical, or diagonal line. Because the board is vertical, pieces inserted in a given column always drop to the lowest unoccupied row of that column. As soon as a column contains 6 pieces, it is full and no other piece can be placed in the column.</p>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"react-bootstrap/dist/react-bootstrap.min.js\";\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}