{"version":3,"sources":["components/Board/Tile.js","components/Board/Board.js","components/BoardSidebar/BoardHeader.js","components/BoardSidebar/BoardHistory.js","components/BoardSidebar/BoardSidebar.js","components/Game.js","components/App.js","index.js"],"names":["Tile","value","isWinner","row","isGameOver","onClick","tileClassName","PLAYER_RED_TILE","winnerClassName","defaultStyle","transition","opacity","transitionStyles","entering","entered","exiting","exited","Transition","in","timeout","state","style","className","Board","tileMatrix","winnerTiles","winner","step","onPlayAgain","onTileClick","tileElements","map","tileRow","tileRowElements","tile","column","find","r","c","GameOverModal","title","subtitle","MAX_STEPS","Button","variant","BoardHeader","onReset","HeaderInfo","highlight","PLAYER_YELLOW_TILE","HeaderActionGroup","ProgressBar","animated","min","max","now","BoardHistory","tileMatrixHistory","onSetGame","historyElements","index","HistoryItem","reverse","BoardSidebar","ROW_SIZE","Game","useState","getInitialTileMatrix","setTileMatrix","setStep","setTileMatrixHistory","head","count","rd","curr","COLUMN_SIZE","cd","d","checkWinner","currentPlayer","prevTileMatrixHistory","historyItem","JSON","parse","stringify","concat","Container","Row","noGutters","Col","prevTileMatrix","cloneTileMatrix","i","oldTileMatrix","oldStep","Array","fill","App","Image","src","Badge","href","rel","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fedb106a.chunk.js","sourcesContent":["import { Transition } from 'react-transition-group';\nimport { PLAYER_RED_TILE } from '../Game';\n\nimport './Tile.css';\n\nexport default function Tile({ value, row, isWinner, isGameOver, onClick }) {\n  const tileClassName = value ? (value === PLAYER_RED_TILE ? \"tile--red\" : \"tile--yellow\") : \"\";\n  const winnerClassName = isWinner ? \"tile--winner\" : \"\";\n\n  const duration = 500;\n  const defaultStyle = {\n    transition: `opacity ${duration}ms ease-in-out`,\n    opacity: 0.5,\n  }\n  \n  const transitionStyles = {\n    entering: { opacity: 1 },\n    entered:  { opacity: 1 },\n    exiting:  { opacity: 0.5 },\n    exited:  { opacity: 0.5 },\n  };\n\n  return (\n    <Transition\n      in={!isGameOver || isWinner} \n      timeout={duration}\n    >\n      {state => (\n        <div style={{\n          ...defaultStyle,\n          ...transitionStyles[state]\n        }}>\n          <button\n            className={`tile ${tileClassName} ${winnerClassName}`}\n            onClick={onClick}\n          />\n        </div>\n      )}\n    </Transition>\n  );\n}","import Tile from \"./Tile\";\nimport { MAX_STEPS } from \"../Game\";\n\nimport \"./Board.css\";\nimport { Button } from \"react-bootstrap\";\n\nexport default function Board({ tileMatrix, winnerTiles, winner, step, onPlayAgain, onTileClick }) {\n  const tileElements = tileMatrix.map((tileRow, row) => {\n    const tileRowElements = tileRow.map((tile, column) => {\n      const winner = winnerTiles?.find(([r, c]) => r === row && c === column);\n      return (\n        <td key={column}>\n          <Tile \n            value={tile} \n            row={row}\n            isWinner={!!winner}\n            isGameOver={!!winnerTiles}\n            onClick={() => onTileClick(column)}\n          />\n        </td>\n      );\n    })\n    return <tr key={row}>{tileRowElements}</tr>;\n  });\n\n  return (\n    <div className=\"board\">\n      {winnerTiles && <GameOverModal title=\"Game Over\" subtitle={`${winner} won the game!`} onPlayAgain={onPlayAgain} />}\n      {!winnerTiles && step >= MAX_STEPS && <GameOverModal title=\"Game Tie\" onPlayAgain={onPlayAgain} />}\n      <table>\n        <tbody>{tileElements}</tbody>\n      </table>\n    </div>\n  );\n}\n\nfunction GameOverModal({ title, subtitle, onPlayAgain }) {\n  return (\n    <div className=\"board--gameover\">\n      <h2><b>{title}</b></h2>\n      {subtitle && <h6>{subtitle}</h6>}\n      <br/>\n      <Button variant=\"dark\" onClick={onPlayAgain}>Play Again</Button>\n    </div>\n  );\n}","import { Button, ProgressBar } from \"react-bootstrap\";\nimport { MAX_STEPS, PLAYER_YELLOW_TILE, PLAYER_RED_TILE } from \"../Game\";\n\nimport './BoardHeader.css';\n\nexport default function BoardHeader({ step, winner, onReset }) {\n  return (\n    <div className=\"board-header\">\n      <HeaderInfo\n        title={winner ? 'Winner:' : 'Turn:'}\n        highlight={step % 2 === 0 ? PLAYER_RED_TILE : PLAYER_YELLOW_TILE }\n      />\n      <HeaderActionGroup\n        onReset={onReset}\n      />\n      <ProgressBar\n          animated\n          variant={winner ? \"danger\" : \"warning\"}\n          min={0}\n          max={MAX_STEPS}\n          now={winner ? MAX_STEPS : step}\n        />\n    </div>\n  );\n}\n\nfunction HeaderInfo({ title, highlight }) {\n  return (\n    <>\n      <h4 className=\"board-header__title\">{title}</h4>\n      <h1 className=\"board-header__highlight\">{highlight}</h1>\n    </>\n  )\n}\n\nfunction HeaderActionGroup({ onReset }) {\n  return (\n    <Button\n      className=\"board-header__reset\"\n      variant=\"dark\"\n      onClick={onReset}\n    >\n      Reset\n    </Button>\n  );\n}","import { Button } from \"react-bootstrap\";\nimport \"./BoardHistory.css\";\n\nexport default function BoardHistory({ tileMatrixHistory, onSetGame }) {\n  const historyElements = tileMatrixHistory.map(({ tileMatrix, step, winner }, index) => (\n    // Note: While an index should not be used in theory, the index shouldn't change on each history element in this case\n    <HistoryItem\n      key={index}\n      index={index}\n      step={step}\n      winner={winner}\n      onSetGame={() => onSetGame(index)}\n    />\n  ));\n  return (\n    <div className=\"board-history\">\n      {historyElements.reverse()}\n    </div>\n  );\n}\n\nfunction HistoryItem({ index, step, winner, onSetGame }) {\n  return (\n    <Button className=\"board-history__item\" variant=\"dark\" onClick={() => onSetGame(index)}>\n      { winner ? `${winner} won in ${step} turns` : `Lasted ${step} turns`}\n    </Button>\n  );\n}\n","import BoardHeader from './BoardHeader';\nimport BoardHistory from './BoardHistory';\n\nimport './BoardSidebar.css';\n\nexport default function BoardSidebar({ step, winner, tileMatrixHistory, onReset, onSetGame }) {\n  return (\n    <div className=\"board-sidebar\">\n      <div className=\"board-sidebar__progress\">\n        <BoardHeader \n          step={step} \n          winner={winner}\n          onReset={onReset}\n        />\n        <BoardHistory\n          tileMatrixHistory={tileMatrixHistory}\n          onSetGame={onSetGame}\n        />\n      </div>\n    </div>\n  )\n}","import { useState } from \"react\";\nimport { Col, Container, Row } from \"react-bootstrap\";\nimport Board from \"./Board/Board\";\nimport BoardSidebar from \"./BoardSidebar/BoardSidebar\";\n\nimport \"./Game.css\";\n\nexport const ROW_SIZE = 6;\nexport const COLUMN_SIZE = 7;\nexport const MAX_STEPS = ROW_SIZE * COLUMN_SIZE;\nexport const PLAYER_RED_TILE = 'red';\nexport const PLAYER_YELLOW_TILE = 'yellow';\n\nexport default function Game() {\n  const [tileMatrix, setTileMatrix] = useState(getInitialTileMatrix());\n  const [step, setStep] = useState(0);\n  const [tileMatrixHistory, setTileMatrixHistory] = useState([]);\n\n  const winnerTiles = checkWinner(tileMatrix);\n  const winner = winnerTiles ? tileMatrix[winnerTiles[0][0]][winnerTiles[0][1]] : null;\n  const currentPlayer = step % 2 === 0 ? PLAYER_RED_TILE : PLAYER_YELLOW_TILE;\n  const onTileClick = (c) => {\n    setTileMatrix(prevTileMatrix => {\n      if (winnerTiles || step >= MAX_STEPS) return prevTileMatrix;\n\n      const cloneTileMatrix = JSON.parse(JSON.stringify(prevTileMatrix));\n      \n      let r = -1;\n      for (let i = ROW_SIZE - 1; i >= 0; i--) {\n        if (cloneTileMatrix[i][c]) continue;\n        r = i;\n        break;\n      }\n      if (r === -1) return prevTileMatrix;\n\n      cloneTileMatrix[r][c] = currentPlayer;\n      setStep(step + 1);\n      return cloneTileMatrix;\n    });\n  };\n\n  const onReset = () => {\n    setTileMatrixHistory(prevTileMatrixHistory => {\n      const historyItem = {\n        tileMatrix: JSON.parse(JSON.stringify(tileMatrix)),\n        step: step,\n        winner: winner\n      };\n      setTileMatrix(getInitialTileMatrix());\n      setStep(0);\n      return prevTileMatrixHistory.concat([historyItem]);\n    });\n  }\n\n  const onSetGame = (index) => {\n    const { tileMatrix: oldTileMatrix, step: oldStep } = tileMatrixHistory[index];\n    setTileMatrix(JSON.parse(JSON.stringify(oldTileMatrix)));\n    setStep(oldStep);\n  }\n\n  return (\n    <Container>\n      <Row noGutters>\n        <Col>\n          <Board \n            tileMatrix={tileMatrix} \n            winnerTiles={winnerTiles}\n            winner={winner}\n            step={step}\n            currentPlayer={currentPlayer}\n            onPlayAgain={onReset}\n            onTileClick={onTileClick}\n          />\n        </Col>\n        <Col>\n          <BoardSidebar \n            step={step}\n            winner={winner}\n            tileMatrixHistory={tileMatrixHistory}\n            onReset={onReset}\n            onSetGame={onSetGame}\n          />\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nfunction checkWinner(tileMatrix) {\n  for (let r = 0; r < ROW_SIZE - 3; r++) {\n    for (let c = 0; c < COLUMN_SIZE; c++) {\n      const head = tileMatrix[r][c];\n      let count = 1;\n      for (let rd = 1; rd < 4; rd++) {\n        const curr = tileMatrix[r + rd][c];\n        if (head && head === curr) count++;\n      }\n      if (count === 4) return [[r, c], [r + 1, c], [r + 2, c], [r + 3, c]];\n    }\n  }\n\n  for (let c = 0; c < COLUMN_SIZE - 3; c++) {\n    for (let r = 0; r < ROW_SIZE; r++) {\n      const head = tileMatrix[r][c];\n      let count = 1;\n      for (let cd = 1; cd < 4; cd++) {\n        const curr = tileMatrix[r][c + cd];\n        if (head && head === curr) count++;\n      }\n      if (count === 4) return [[r, c], [r, c + 1], [r, c + 2], [r, c + 3]];\n    }\n  }\n\n  for (let r = 0; r < ROW_SIZE - 3; r++) {\n    for (let c = 0; c < COLUMN_SIZE - 3; c++) {\n      const head = tileMatrix[r][c];\n      let count = 1;\n      for (let d = 1; d < 4; d++) {\n        const curr = tileMatrix[r + d][c + d];\n        if (head && head === curr) count++;\n      }\n      if (count === 4) return [[r, c], [r + 1, c + 1], [r + 2, c + 2], [r + 3, c + 3]];\n    }\n  }\n\n  for (let r = 0; r < ROW_SIZE - 3; r++) {\n    for (let c = 3; c < COLUMN_SIZE; c++) {\n      const head = tileMatrix[r][c];\n      let count = 1;\n      for (let d = 1; d < 4; d++) {\n        const curr = tileMatrix[r + d][c - d];\n        if (head && head === curr) count++;\n      }\n      if (count === 4) return [[r, c], [r + 1, c - 1], [r + 2, c - 2], [r + 3, c - 3]];\n    }\n  }\n  return null;\n}\n\nfunction getInitialTileMatrix() {\n  return Array(ROW_SIZE).fill(Array(COLUMN_SIZE).fill(null));\n}","import { Badge, Col, Container, Image, Row } from \"react-bootstrap\";\nimport Game from \"./Game\";\n\nimport \"./App.css\";\n\nexport default function App() {\n  return (\n    <Container className=\"app\">\n      <Row>\n        <Col className=\"app__header\">\n          <Image src=\"./images/connect-four-logo.png\" />\n          <div className=\"app__about\">\n            <Badge variant=\"dark\">React</Badge>\n            <Badge variant=\"dark\">React-Bootstrap</Badge>\n            <Badge variant=\"dark\">React-Transition-Group</Badge>\n            <Badge variant=\"dark\">JavaScript</Badge>\n            <Badge variant=\"dark\">CSS</Badge>\n            <Badge variant=\"dark\">HTML</Badge>\n          </div>\n        </Col>\n      </Row>\n      <Row noGutters>\n        <Col>\n          <Game />\n        </Col>\n      </Row>\n      <Row>\n        <Col className=\"app__footer\">\n          <h2>Description</h2>\n          <p>Connect-Four is a <a href=\"https://en.wikipedia.org/wiki/Tic-tac-toe\" rel=\"noreferrer\" target=\"_blank\">tic-tac-toe</a>-like two-player game in which players alternately place pieces on a vertical board 7 columns across and 6 rows high. Each player uses pieces of a particular color (commonly black and red, or sometimes yellow and red), and the object is to be the first to obtain four pieces in a horizontal, vertical, or diagonal line. Because the board is vertical, pieces inserted in a given column always drop to the lowest unoccupied row of that column. As soon as a column contains 6 pieces, it is full and no other piece can be placed in the column.</p>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"react-bootstrap/dist/react-bootstrap.min.js\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}